// This file is auto-generated by @hey-api/openapi-ts

export type ActiveQaCatalogGeneratorType = {
  type: "RAGAS" | "DEEPEVAL";
};

export type AnswerRelevancyMetricConfigurationCreate = {
  type: "ANSWER_RELEVANCY";
  name: string;
  threshold: number;
  includeReason: boolean;
  chatModelId: string;
  strictMode: boolean;
};

export type AnswerRelevancyMetricConfigurationRead = {
  type: "ANSWER_RELEVANCY";
  name: string;
  threshold: number;
  includeReason: boolean;
  chatModelId: string;
  strictMode: boolean;
};

export type AnswerRelevancyMetricConfigurationUpdate = {
  type: "ANSWER_RELEVANCY";
  name?: string | null;
  threshold?: number | null;
  includeReason?: boolean | null;
  chatModelId?: string | null;
  strictMode?: boolean | null;
};

export type AzureOpenAillmEndpointConfigurationCreate = {
  type: "AZURE_OPENAI";
  parallelQueries: number;
  maxRetries: number;
  endpoint: string;
  apiKey: string;
  apiVersion: string;
  deployment: string;
  requestTimeout: number;
  language: Language | null;
};

export type AzureOpenAillmEndpointConfigurationRead = {
  type: "AZURE_OPENAI";
  parallelQueries: number;
  maxRetries: number;
  endpoint: string;
  apiVersion: string;
  deployment: string;
  requestTimeout: number;
  language: Language | null;
};

export type AzureOpenAillmEndpointConfigurationUpdate = {
  type: "AZURE_OPENAI";
  parallelQueries?: number | null;
  maxRetries?: number | null;
  endpoint?: string | null;
  apiKey?: string | null;
  apiVersion?: string | null;
  deployment?: string | null;
  requestTimeout?: number | null;
  language?: Language | "UNSET_VALUE" | null;
};

export type Base64DownloadUrl = string;

export type BodyCreateDataSourceConfigV1QaCatalogGeneratorUploadPost = {
  generator_type: "RAGAS" | "DEEPEVAL";
  files: Array<Blob | File>;
};

export type BodyUpdateV1QaCatalogCatalogIdUploadPut = {
  file: Blob | File;
};

export type BodyUploadV1QaCatalogUploadPost = {
  file: Blob | File;
  name: string;
};

export type C4LlmEndpointConfigurationCreate = {
  type: "C4";
  parallelQueries: number;
  maxRetries: number;
  endpoint: string;
  configurationId: number;
  apiKey: string;
  requestTimeout: number;
};

export type C4LlmEndpointConfigurationRead = {
  type: "C4";
  parallelQueries: number;
  maxRetries: number;
  endpoint: string;
  configurationId: number;
  requestTimeout: number;
};

export type C4LlmEndpointConfigurationUpdate = {
  type: "C4";
  parallelQueries?: number | null;
  maxRetries?: number | null;
  endpoint?: string | null;
  apiKey?: string | null;
  configurationId?: number | null;
  requestTimeout?: number | null;
};

export type DashboardData = {
  lastEvaluation: DashboardLastEvaluationResult | null;
  statistics: DashboardStatistics;
};

export type DashboardEvaluationResult = {
  id: string;
  name: string;
  createdAt: string;
  metricResults: Array<MetricResult>;
};

export type DashboardLastEvaluationCatalogHistory = {
  catalogId: string;
  catalogName: string;
  evaluationResults: Array<DashboardEvaluationResult>;
};

export type DashboardLastEvaluationResult = {
  id: string;
  name: string;
  createdAt: string;
  metricResults: Array<MetricResult>;
  catalogHistory: DashboardLastEvaluationCatalogHistory | null;
};

export type DashboardStatistics = {
  numberOfCatalogs: number;
  numberOfEvaluations: number;
};

export type DeepevalQaCatalogGeneratorConfig = {
  type: "DEEPEVAL";
  goldensPerDoc: number;
  numEvolutions: number;
  parallelQueries: number;
};

export type DeepevalQaCatalogGeneratorModelConfigSchema = {
  type: "DEEPEVAL";
  llmEndpoint: string;
};

export type DeleteCatalogResult = {
  previousRevisionId: string | null;
};

export type DownloadQaCatalogOptions = {
  format: SupportedQaCatalogDownloadFormat;
  parentCatalogId: string;
  versionIds?: Array<string> | null;
  includeAll?: boolean;
};

export type DownloadQaCatalogResponse = {
  downloadUrl: Base64DownloadUrl;
  filename: string;
};

export type EvaluationDelete = {
  version: number;
};

export type EvaluationDetailSummary = {
  id: string;
  name: string;
  createdAt: string;
  qaCatalog: EvaluationDetailSummaryQaCatalog | null;
  metrics: Array<EvaluationDetailSummaryMetric>;
  metricResults: Array<MetricResult>;
  metricScores: Array<MetricScores>;
  status: EvaluationStatus;
  testCaseProgress: TestCaseProgress;
  version: number;
};

export type EvaluationDetailSummaryMetric = {
  id: string;
  name: string;
  type: string;
};

export type EvaluationDetailSummaryQaCatalog = {
  id: string;
  name: string;
  qaPairCount?: number;
};

export enum EvaluationStatus {
  PENDING = "PENDING",
  RUNNING = "RUNNING",
  SUCCESS = "SUCCESS",
  FAILURE = "FAILURE",
}

export type EvaluationUpdate = {
  name?: string | null;
  version: number;
};

export type FaithfulnessMetricConfigurationCreate = {
  type: "FAITHFULNESS";
  name: string;
  threshold: number;
  includeReason: boolean;
  strictMode: boolean;
  chatModelId: string;
};

export type FaithfulnessMetricConfigurationRead = {
  type: "FAITHFULNESS";
  name: string;
  threshold: number;
  includeReason: boolean;
  strictMode: boolean;
  chatModelId: string;
};

export type FaithfulnessMetricConfigurationUpdate = {
  type: "FAITHFULNESS";
  name?: string | null;
  threshold?: number | null;
  includeReason?: boolean | null;
  strictMode?: boolean | null;
  chatModelId?: string | null;
};

export type GEvalMetricConfigurationCreate = {
  type: "G_EVAL";
  name: string;
  evaluationSteps: Array<string>;
  evaluationParams: Array<LlmTestCaseParams>;
  chatModelId: string;
  strictMode: boolean;
  threshold: number;
};

export type GEvalMetricConfigurationRead = {
  type: "G_EVAL";
  name: string;
  evaluationSteps: Array<string>;
  evaluationParams: Array<LlmTestCaseParams>;
  chatModelId: string;
  strictMode: boolean;
  threshold: number;
};

export type GEvalMetricConfigurationUpdate = {
  type: "G_EVAL";
  name?: string | null;
  evaluationSteps?: Array<string> | null;
  evaluationParams?: Array<LlmTestCaseParams> | null;
  chatModelId?: string | null;
  strictMode?: boolean | null;
  threshold?: number | null;
};

export type GenericError = {
  details: JsonVal;
};

export type GetAllEvaluationResult = {
  id: string;
  name: string;
  createdAt: string;
  catalog: QaCatalogEvaluationResult | null;
  metricResults: Array<MetricResult>;
  status: EvaluationStatus;
  testCaseProgress: TestCaseProgress;
  version: number;
};

export type GroupedEvaluationResult = {
  configurationId: string | null;
  configurationName: string | null;
  configurationVersion: string | null;
  input: string;
  expectedOutput: string;
  createdAt: string;
  groupingKey: string | null;
  metaData: JsonObject | null;
  metricResults: Array<MetricResult>;
  testCases: Array<GroupedEvaluationTestCase>;
};

export type GroupedEvaluationTestCase = {
  id: string;
  index: number;
  testCaseStatus: TestCaseStatus;
  results: Array<GroupedEvaluationTestCaseResult>;
};

export type GroupedEvaluationTestCaseResult = {
  success: boolean;
  metricId: string;
  score: number | null;
  threashold: number | null;
};

export type HttpValidationError = {
  detail?: Array<ValidationError>;
};

export type HallucinationMetricConfigurationCreate = {
  type: "HALLUCINATION";
  name: string;
  threshold: number;
  includeReason: boolean;
  strictMode: boolean;
  chatModelId: string;
};

export type HallucinationMetricConfigurationRead = {
  type: "HALLUCINATION";
  name: string;
  threshold: number;
  includeReason: boolean;
  strictMode: boolean;
  chatModelId: string;
};

export type HallucinationMetricConfigurationUpdate = {
  type: "HALLUCINATION";
  name?: string | null;
  threshold?: number | null;
  includeReason?: boolean | null;
  strictMode?: boolean | null;
  chatModelId?: string | null;
};

export type JsonArray = Array<JsonVal>;

export type JsonObject = {
  [key: string]: JsonVal;
};

export type JsonVal =
  | boolean
  | string
  | number
  | number
  | JsonArray
  | JsonObject
  | null;

export type LlmEndpoint = {
  id: string;
  name: string;
  createdAt: string;
  updatedAt: string;
  supportedFeatures: Array<PluginFeature>;
  configuration: LlmEndpointConfigurationRead;
  version: number;
};

export type LlmEndpointConfigurationCreate =
  | C4LlmEndpointConfigurationCreate
  | AzureOpenAillmEndpointConfigurationCreate
  | OpenAillmEndpointConfigurationCreate;

export type LlmEndpointConfigurationRead =
  | C4LlmEndpointConfigurationRead
  | AzureOpenAillmEndpointConfigurationRead
  | OpenAillmEndpointConfigurationRead;

export type LlmEndpointConfigurationUpdate =
  | C4LlmEndpointConfigurationUpdate
  | AzureOpenAillmEndpointConfigurationUpdate
  | OpenAillmEndpointConfigurationUpdate;

export type LlmEndpointCreate = {
  name: string;
  configuration: LlmEndpointConfigurationCreate;
};

export type LlmEndpointDelete = {
  version: number;
};

export type LlmEndpointType = {
  name: string;
  supportedFeatures: Array<PluginFeature>;
};

export type LlmEndpointTypesResponse = {
  types: Array<LlmEndpointType>;
};

export type LlmEndpointUpdate = {
  name?: string | null;
  configuration: LlmEndpointConfigurationUpdate;
  version: number;
};

export enum LlmTestCaseParams {
  INPUT = "input",
  ACTUAL_OUTPUT = "actual_output",
  EXPECTED_OUTPUT = "expected_output",
  CONTEXT = "context",
  RETRIEVAL_CONTEXT = "retrieval_context",
  TOOLS_CALLED = "tools_called",
  EXPECTED_TOOLS = "expected_tools",
}

export enum Language {
  ENGLISH = "english",
  GERMAN = "german",
}

export type Metric = {
  id: string;
  createdAt: string;
  updatedAt: string;
  configuration: MetricConfigurationRead;
  version: number;
};

export type MetricConfigurationCreate =
  | GEvalMetricConfigurationCreate
  | AnswerRelevancyMetricConfigurationCreate
  | HallucinationMetricConfigurationCreate
  | FaithfulnessMetricConfigurationCreate;

export type MetricConfigurationRead =
  | GEvalMetricConfigurationRead
  | AnswerRelevancyMetricConfigurationRead
  | HallucinationMetricConfigurationRead
  | FaithfulnessMetricConfigurationRead;

export type MetricConfigurationUpdate =
  | GEvalMetricConfigurationUpdate
  | AnswerRelevancyMetricConfigurationUpdate
  | HallucinationMetricConfigurationUpdate
  | FaithfulnessMetricConfigurationUpdate;

export type MetricCreate = {
  configuration: MetricConfigurationCreate;
};

export type MetricDelete = {
  version: number;
};

export type MetricResult = {
  id: string;
  name: string;
  type: string;
  total: number;
  successes: number;
  failures: number;
  errors: number;
};

export type MetricScore = {
  testCaseId: string;
  score: number;
};

export type MetricScores = {
  id: string;
  name: string;
  type: string;
  scores: Array<MetricScore>;
};

export type MetricTypesResponse = {
  types: Array<string>;
};

export type MetricUpdate = {
  version: number;
  configuration: MetricConfigurationUpdate;
};

export type MetricsData = {
  id: string;
  name: string;
  threshold: number;
  success: boolean;
  score: number | null;
  reason: string | null;
  strictMode: boolean | null;
  evaluationModel: string | null;
  error: string | null;
};

export type NewQaPair = {
  question: string;
  expectedOutput: string;
  contexts: Array<string>;
};

export type OpenAillmEndpointConfigurationCreate = {
  type: "OPENAI";
  parallelQueries: number;
  maxRetries: number;
  baseUrl: string | null;
  apiKey: string;
  model: string;
  temperature: number | null;
  requestTimeout: number;
  language: Language | null;
};

export type OpenAillmEndpointConfigurationRead = {
  type: "OPENAI";
  parallelQueries: number;
  maxRetries: number;
  baseUrl: string | null;
  model: string;
  temperature: number | null;
  requestTimeout: number;
  language: Language | null;
};

export type OpenAillmEndpointConfigurationUpdate = {
  type: "OPENAI";
  parallelQueries?: number | null;
  maxRetries?: number | null;
  baseUrl?: string | "UNSET_VALUE" | null;
  apiKey?: string | null;
  model?: string | null;
  temperature?: number | "UNSET_VALUE" | null;
  requestTimeout?: number | null;
  language?: Language | "UNSET_VALUE" | null;
};

export enum PluginFeature {
  LLM_QUERY = "LLM_QUERY",
  CHAT_MODEL = "CHAT_MODEL",
}

export type QaCatalog = {
  id: string;
  name: string;
  createdAt: string;
  updatedAt: string;
  revision: number;
  status: QaCatalogStatus;
  error?: string | null;
};

export type QaCatalogGenerationConfig =
  | RagasQaCatalogGeneratorConfig
  | DeepevalQaCatalogGeneratorConfig;

export type QaCatalogGenerationData = {
  type: "RAGAS" | "DEEPEVAL";
  name: string;
  config: QaCatalogGenerationConfig;
  dataSourceConfigId: string;
  modelConfigSchema: QaCatalogGenerationModelConfigurationSchema;
};

export type QaCatalogGenerationModelConfigurationSchema =
  | RagasQaCatalogGeneratorModelConfigSchema
  | DeepevalQaCatalogGeneratorModelConfigSchema;

export type QaCatalogGenerationResult = {
  catalogId: string;
};

export type QaCatalogPreview = {
  id: string;
  name: string;
  length: number;
  revision: number;
  createdAt: string;
  updatedAt: string;
  status: QaCatalogStatus;
};

export enum QaCatalogStatus {
  GENERATING = "GENERATING",
  READY = "READY",
  FAILURE = "FAILURE",
}

export type QaCatalogUpdateRequest = {
  updates: Array<QaPair>;
  additions: Array<NewQaPair>;
  deletions: Array<string>;
};

export type QaCatalogVersionHistory = {
  versions: Array<QaCatalogVersionHistoryItem>;
};

export type QaCatalogVersionHistoryItem = {
  versionId: string;
  createdAt: string;
  revision: number;
};

export type QaPair = {
  id: string;
  question: string;
  expectedOutput: string;
  contexts: Array<string>;
  metaData: {
    [key: string]: unknown;
  };
};

export type QaCatalogEvaluationResult = {
  id: string;
  name: string;
};

export type RagasQaCatalogGeneratorConfig = {
  type: "RAGAS";
  knowledgeGraphLocation: string | null;
  sampleCount: number;
  queryDistribution: {
    [key: string]: number;
  };
  personas: Array<RagasQaCatalogGeneratorPersona> | null;
};

export type RagasQaCatalogGeneratorModelConfigSchema = {
  type: "RAGAS";
  llmEndpoint: string;
};

export type RagasQaCatalogGeneratorPersona = {
  name: string;
  description: string;
};

export enum RagasQaCatalogQuerySynthesizer {
  SINGLE_HOP_SPECIFIC = "SINGLE_HOP_SPECIFIC",
  MULTI_HOP_SPECIFIC = "MULTI_HOP_SPECIFIC",
  MULTI_HOP_ABSTRACT = "MULTI_HOP_ABSTRACT",
}

export type RunEvaluationByQaCatalog = {
  name: string;
  catalogId: string;
  llmEndpointId: string;
  metrics: Array<string>;
  testCasesPerQaPair?: number;
};

export type RunEvaluationByTestCases = {
  metrics: Array<string>;
  name?: string | null;
  testCases: Array<RunEvaluationByTestCasesTestCase>;
};

export type RunEvaluationByTestCasesTestCase = {
  groupingKey?: string | null;
  index?: number;
  input?: string | null;
  actualOutput: string;
  expectedOutput: string;
  context?: Array<string> | null;
  retrievalContext?: Array<string> | null;
  metaData?: {
    [key: string]: unknown;
  } | null;
  llmConfigurationId?: string | null;
  llmConfigurationName?: string | null;
  llmConfigurationVersion?: string | null;
};

export enum SupportedQaCatalogDownloadFormat {
  CSV = "csv",
  JSON = "json",
  YAML = "yaml",
  XLSX = "xlsx",
}

export type TestCaseProgress = {
  done: number;
  total: number;
};

export enum TestCaseStatus {
  PENDING = "PENDING",
  RETRIEVING_ANSWER = "RETRIEVING_ANSWER",
  EVALUATING = "EVALUATING",
  SUCCESS = "SUCCESS",
  FAILURE = "FAILURE",
}

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type RagEvalBackendEvalEvaluateResultsRouterEvaluationResult = {
  id: string;
  configurationId: string | null;
  configurationName: string | null;
  configurationVersion: string | null;
  input: string;
  expectedOutput: string;
  context: Array<string> | null;
  actualOutput: string | null;
  retrievalContext: Array<string> | null;
  metaData: JsonObject | null;
  metricsData: Array<MetricsData>;
  status: TestCaseStatus;
  error: string | null;
};

export type RagEvalBackendEvalEvaluationsModelsEvaluationResult = {
  id: string;
  name: string;
  createdAt: string;
  status: EvaluationStatus;
  version: number;
};

export type HealthcheckHealthData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/health";
};

export type HealthcheckHealthResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type EvaluationsGetAllData = {
  body?: never;
  path?: never;
  query?: {
    query?: string | null;
    from_date?: string | null;
    to_date?: string | null;
    offset?: number;
    limit?: number;
  };
  url: "/v1/eval/evaluations";
};

export type EvaluationsGetAllErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type EvaluationsGetAllError =
  EvaluationsGetAllErrors[keyof EvaluationsGetAllErrors];

export type EvaluationsGetAllResponses = {
  /**
   * Successful Response
   */
  200: Array<GetAllEvaluationResult>;
};

export type EvaluationsGetAllResponse =
  EvaluationsGetAllResponses[keyof EvaluationsGetAllResponses];

export type EvaluationsPostData = {
  body: RunEvaluationByQaCatalog | RunEvaluationByTestCases;
  path?: never;
  query?: never;
  url: "/v1/eval/evaluations";
};

export type EvaluationsPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type EvaluationsPostError =
  EvaluationsPostErrors[keyof EvaluationsPostErrors];

export type EvaluationsPostResponses = {
  /**
   * Successful Response
   */
  200: RagEvalBackendEvalEvaluationsModelsEvaluationResult;
};

export type EvaluationsPostResponse =
  EvaluationsPostResponses[keyof EvaluationsPostResponses];

export type EvaluationsDeleteData = {
  body: EvaluationDelete;
  path: {
    evaluation_id: string;
  };
  query?: never;
  url: "/v1/eval/evaluations/{evaluation_id}";
};

export type EvaluationsDeleteErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type EvaluationsDeleteError =
  EvaluationsDeleteErrors[keyof EvaluationsDeleteErrors];

export type EvaluationsDeleteResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type EvaluationsGetData = {
  body?: never;
  path: {
    evaluation_id: string;
  };
  query?: never;
  url: "/v1/eval/evaluations/{evaluation_id}";
};

export type EvaluationsGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type EvaluationsGetError =
  EvaluationsGetErrors[keyof EvaluationsGetErrors];

export type EvaluationsGetResponses = {
  /**
   * Successful Response
   */
  200: RagEvalBackendEvalEvaluationsModelsEvaluationResult;
};

export type EvaluationsGetResponse =
  EvaluationsGetResponses[keyof EvaluationsGetResponses];

export type EvaluationsPatchData = {
  body: EvaluationUpdate;
  path: {
    evaluation_id: string;
  };
  query?: never;
  url: "/v1/eval/evaluations/{evaluation_id}";
};

export type EvaluationsPatchErrors = {
  /**
   * Not Found
   */
  404: GenericError;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type EvaluationsPatchError =
  EvaluationsPatchErrors[keyof EvaluationsPatchErrors];

export type EvaluationsPatchResponses = {
  /**
   * Successful Response
   */
  200: RagEvalBackendEvalEvaluationsModelsEvaluationResult;
};

export type EvaluationsPatchResponse =
  EvaluationsPatchResponses[keyof EvaluationsPatchResponses];

export type EvaluationsGetEvaluationDetailSummaryData = {
  body?: never;
  path: {
    evaluation_id: string;
  };
  query?: never;
  url: "/v1/eval/evaluations/{evaluation_id}/summary";
};

export type EvaluationsGetEvaluationDetailSummaryErrors = {
  /**
   * Not Found
   */
  404: GenericError;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type EvaluationsGetEvaluationDetailSummaryError =
  EvaluationsGetEvaluationDetailSummaryErrors[keyof EvaluationsGetEvaluationDetailSummaryErrors];

export type EvaluationsGetEvaluationDetailSummaryResponses = {
  /**
   * Successful Response
   */
  200: EvaluationDetailSummary;
};

export type EvaluationsGetEvaluationDetailSummaryResponse =
  EvaluationsGetEvaluationDetailSummaryResponses[keyof EvaluationsGetEvaluationDetailSummaryResponses];

export type EvaluationsGetResultsExportData = {
  body?: never;
  path: {
    evaluation_id: string;
  };
  query?: never;
  url: "/v1/eval/evaluations/{evaluation_id}/results-export";
};

export type EvaluationsGetResultsExportErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type EvaluationsGetResultsExportError =
  EvaluationsGetResultsExportErrors[keyof EvaluationsGetResultsExportErrors];

export type EvaluationsGetResultsExportResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type EvaluationResultsGetGroupedData = {
  body?: never;
  path?: never;
  query?: {
    evaluation_id?: string;
    offset?: number;
    limit?: number;
  };
  url: "/v1/eval/evaluation-results/grouped";
};

export type EvaluationResultsGetGroupedErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type EvaluationResultsGetGroupedError =
  EvaluationResultsGetGroupedErrors[keyof EvaluationResultsGetGroupedErrors];

export type EvaluationResultsGetGroupedResponses = {
  /**
   * Successful Response
   */
  200: Array<GroupedEvaluationResult>;
};

export type EvaluationResultsGetGroupedResponse =
  EvaluationResultsGetGroupedResponses[keyof EvaluationResultsGetGroupedResponses];

export type EvaluationResultsGetData = {
  body?: never;
  path: {
    result_id: string;
  };
  query?: never;
  url: "/v1/eval/evaluation-results/{result_id}";
};

export type EvaluationResultsGetErrors = {
  /**
   * Not Found
   */
  404: GenericError;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type EvaluationResultsGetError =
  EvaluationResultsGetErrors[keyof EvaluationResultsGetErrors];

export type EvaluationResultsGetResponses = {
  /**
   * Successful Response
   */
  200: RagEvalBackendEvalEvaluateResultsRouterEvaluationResult;
};

export type EvaluationResultsGetResponse =
  EvaluationResultsGetResponses[keyof EvaluationResultsGetResponses];

export type DashboardGetDataData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v1/dashboard";
};

export type DashboardGetDataResponses = {
  /**
   * Successful Response
   */
  200: DashboardData;
};

export type DashboardGetDataResponse =
  DashboardGetDataResponses[keyof DashboardGetDataResponses];

export type QaCatalogGetAllData = {
  body?: never;
  path?: never;
  query?: {
    name?: string | null;
    offset?: number;
    limit?: number;
  };
  url: "/v1/qa-catalog";
};

export type QaCatalogGetAllErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type QaCatalogGetAllError =
  QaCatalogGetAllErrors[keyof QaCatalogGetAllErrors];

export type QaCatalogGetAllResponses = {
  /**
   * Successful Response
   */
  200: Array<QaCatalogPreview>;
};

export type QaCatalogGetAllResponse =
  QaCatalogGetAllResponses[keyof QaCatalogGetAllResponses];

export type QaCatalogUploadData = {
  body: BodyUploadV1QaCatalogUploadPost;
  path?: never;
  query?: never;
  url: "/v1/qa-catalog/upload";
};

export type QaCatalogUploadErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type QaCatalogUploadError =
  QaCatalogUploadErrors[keyof QaCatalogUploadErrors];

export type QaCatalogUploadResponses = {
  /**
   * Successful Response
   */
  201: QaCatalog;
};

export type QaCatalogUploadResponse =
  QaCatalogUploadResponses[keyof QaCatalogUploadResponses];

export type QaCatalogUpdateData = {
  body: BodyUpdateV1QaCatalogCatalogIdUploadPut;
  path: {
    catalog_id: string;
  };
  query?: never;
  url: "/v1/qa-catalog/{catalog_id}/upload";
};

export type QaCatalogUpdateErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type QaCatalogUpdateError =
  QaCatalogUpdateErrors[keyof QaCatalogUpdateErrors];

export type QaCatalogUpdateResponses = {
  /**
   * Successful Response
   */
  201: QaCatalog;
};

export type QaCatalogUpdateResponse =
  QaCatalogUpdateResponses[keyof QaCatalogUpdateResponses];

export type QaCatalogDeleteData = {
  body?: never;
  path: {
    catalog_id: string;
  };
  query?: never;
  url: "/v1/qa-catalog/{catalog_id}";
};

export type QaCatalogDeleteErrors = {
  /**
   * Not Found
   */
  404: GenericError;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type QaCatalogDeleteError =
  QaCatalogDeleteErrors[keyof QaCatalogDeleteErrors];

export type QaCatalogDeleteResponses = {
  /**
   * Successful Response
   */
  200: DeleteCatalogResult;
};

export type QaCatalogDeleteResponse =
  QaCatalogDeleteResponses[keyof QaCatalogDeleteResponses];

export type QaCatalogGetData = {
  body?: never;
  path: {
    catalog_id: string;
  };
  query?: never;
  url: "/v1/qa-catalog/{catalog_id}";
};

export type QaCatalogGetErrors = {
  /**
   * Not Found
   */
  404: GenericError;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type QaCatalogGetError = QaCatalogGetErrors[keyof QaCatalogGetErrors];

export type QaCatalogGetResponses = {
  /**
   * Successful Response
   */
  200: QaCatalog;
};

export type QaCatalogGetResponse =
  QaCatalogGetResponses[keyof QaCatalogGetResponses];

export type QaCatalogEditQaCatalogData = {
  body: QaCatalogUpdateRequest;
  path: {
    catalog_id: string;
  };
  query?: never;
  url: "/v1/qa-catalog/{catalog_id}";
};

export type QaCatalogEditQaCatalogErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type QaCatalogEditQaCatalogError =
  QaCatalogEditQaCatalogErrors[keyof QaCatalogEditQaCatalogErrors];

export type QaCatalogEditQaCatalogResponses = {
  /**
   * Successful Response
   */
  200: QaCatalog;
};

export type QaCatalogEditQaCatalogResponse =
  QaCatalogEditQaCatalogResponses[keyof QaCatalogEditQaCatalogResponses];

export type QaCatalogGetPreviewData = {
  body?: never;
  path: {
    catalog_id: string;
  };
  query?: never;
  url: "/v1/qa-catalog/{catalog_id}/preview";
};

export type QaCatalogGetPreviewErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type QaCatalogGetPreviewError =
  QaCatalogGetPreviewErrors[keyof QaCatalogGetPreviewErrors];

export type QaCatalogGetPreviewResponses = {
  /**
   * Successful Response
   */
  200: QaCatalogPreview;
};

export type QaCatalogGetPreviewResponse =
  QaCatalogGetPreviewResponses[keyof QaCatalogGetPreviewResponses];

export type QaCatalogGetCatalogQaPairsData = {
  body?: never;
  path: {
    catalog_id: string;
  };
  query?: {
    offset?: number;
    limit?: number;
  };
  url: "/v1/qa-catalog/{catalog_id}/qa-pairs";
};

export type QaCatalogGetCatalogQaPairsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type QaCatalogGetCatalogQaPairsError =
  QaCatalogGetCatalogQaPairsErrors[keyof QaCatalogGetCatalogQaPairsErrors];

export type QaCatalogGetCatalogQaPairsResponses = {
  /**
   * Successful Response
   */
  200: Array<QaPair>;
};

export type QaCatalogGetCatalogQaPairsResponse =
  QaCatalogGetCatalogQaPairsResponses[keyof QaCatalogGetCatalogQaPairsResponses];

export type QaCatalogCreateDataSourceConfigData = {
  body: BodyCreateDataSourceConfigV1QaCatalogGeneratorUploadPost;
  path?: never;
  query?: never;
  url: "/v1/qa-catalog/generator/upload";
};

export type QaCatalogCreateDataSourceConfigErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type QaCatalogCreateDataSourceConfigError =
  QaCatalogCreateDataSourceConfigErrors[keyof QaCatalogCreateDataSourceConfigErrors];

export type QaCatalogCreateDataSourceConfigResponses = {
  /**
   * Successful Response
   */
  200: string;
};

export type QaCatalogCreateDataSourceConfigResponse =
  QaCatalogCreateDataSourceConfigResponses[keyof QaCatalogCreateDataSourceConfigResponses];

export type QaCatalogGenerateData = {
  body: QaCatalogGenerationData;
  path?: never;
  query?: never;
  url: "/v1/qa-catalog/generator/catalog";
};

export type QaCatalogGenerateErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type QaCatalogGenerateError =
  QaCatalogGenerateErrors[keyof QaCatalogGenerateErrors];

export type QaCatalogGenerateResponses = {
  /**
   * Successful Response
   */
  201: QaCatalogGenerationResult;
};

export type QaCatalogGenerateResponse =
  QaCatalogGenerateResponses[keyof QaCatalogGenerateResponses];

export type QaCatalogGetGeneratorTypesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v1/qa-catalog/generator/types";
};

export type QaCatalogGetGeneratorTypesResponses = {
  /**
   * Successful Response
   */
  200: Array<ActiveQaCatalogGeneratorType>;
};

export type QaCatalogGetGeneratorTypesResponse =
  QaCatalogGetGeneratorTypesResponses[keyof QaCatalogGetGeneratorTypesResponses];

export type QaCatalogDownloadData = {
  body: DownloadQaCatalogOptions;
  path?: never;
  query?: never;
  url: "/v1/qa-catalog/download";
};

export type QaCatalogDownloadErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type QaCatalogDownloadError =
  QaCatalogDownloadErrors[keyof QaCatalogDownloadErrors];

export type QaCatalogDownloadResponses = {
  /**
   * Successful Response
   */
  200: DownloadQaCatalogResponse;
};

export type QaCatalogDownloadResponse =
  QaCatalogDownloadResponses[keyof QaCatalogDownloadResponses];

export type QaCatalogGetHistoryData = {
  body?: never;
  path: {
    catalog_id: string;
  };
  query?: never;
  url: "/v1/qa-catalog/{catalog_id}/history";
};

export type QaCatalogGetHistoryErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type QaCatalogGetHistoryError =
  QaCatalogGetHistoryErrors[keyof QaCatalogGetHistoryErrors];

export type QaCatalogGetHistoryResponses = {
  /**
   * Successful Response
   */
  200: QaCatalogVersionHistory;
};

export type QaCatalogGetHistoryResponse =
  QaCatalogGetHistoryResponses[keyof QaCatalogGetHistoryResponses];

export type LlmEndpointsGetAllData = {
  body?: never;
  path?: never;
  query?: {
    q?: string | null;
    supported_features?: Array<PluginFeature> | null;
    offset?: number;
    limit?: number;
  };
  url: "/v1/llm-endpoints";
};

export type LlmEndpointsGetAllErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type LlmEndpointsGetAllError =
  LlmEndpointsGetAllErrors[keyof LlmEndpointsGetAllErrors];

export type LlmEndpointsGetAllResponses = {
  /**
   * Successful Response
   */
  200: Array<LlmEndpoint>;
};

export type LlmEndpointsGetAllResponse =
  LlmEndpointsGetAllResponses[keyof LlmEndpointsGetAllResponses];

export type LlmEndpointsPostData = {
  body: LlmEndpointCreate;
  path?: never;
  query?: never;
  url: "/v1/llm-endpoints";
};

export type LlmEndpointsPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type LlmEndpointsPostError =
  LlmEndpointsPostErrors[keyof LlmEndpointsPostErrors];

export type LlmEndpointsPostResponses = {
  /**
   * Successful Response
   */
  201: LlmEndpoint;
};

export type LlmEndpointsPostResponse =
  LlmEndpointsPostResponses[keyof LlmEndpointsPostResponses];

export type LlmEndpointsGetTypesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v1/llm-endpoints/types";
};

export type LlmEndpointsGetTypesResponses = {
  /**
   * Successful Response
   */
  200: LlmEndpointTypesResponse;
};

export type LlmEndpointsGetTypesResponse =
  LlmEndpointsGetTypesResponses[keyof LlmEndpointsGetTypesResponses];

export type LlmEndpointsDeleteData = {
  body: LlmEndpointDelete;
  path: {
    llm_endpoint_id: string;
  };
  query?: never;
  url: "/v1/llm-endpoints/{llm_endpoint_id}";
};

export type LlmEndpointsDeleteErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type LlmEndpointsDeleteError =
  LlmEndpointsDeleteErrors[keyof LlmEndpointsDeleteErrors];

export type LlmEndpointsDeleteResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type LlmEndpointsGetData = {
  body?: never;
  path: {
    llm_endpoint_id: string;
  };
  query?: never;
  url: "/v1/llm-endpoints/{llm_endpoint_id}";
};

export type LlmEndpointsGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type LlmEndpointsGetError =
  LlmEndpointsGetErrors[keyof LlmEndpointsGetErrors];

export type LlmEndpointsGetResponses = {
  /**
   * Successful Response
   */
  200: LlmEndpoint;
};

export type LlmEndpointsGetResponse =
  LlmEndpointsGetResponses[keyof LlmEndpointsGetResponses];

export type LlmEndpointsPatchData = {
  body: LlmEndpointUpdate;
  path: {
    llm_endpoint_id: string;
  };
  query?: never;
  url: "/v1/llm-endpoints/{llm_endpoint_id}";
};

export type LlmEndpointsPatchErrors = {
  /**
   * Not Found
   */
  404: GenericError;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type LlmEndpointsPatchError =
  LlmEndpointsPatchErrors[keyof LlmEndpointsPatchErrors];

export type LlmEndpointsPatchResponses = {
  /**
   * Successful Response
   */
  200: LlmEndpoint;
};

export type LlmEndpointsPatchResponse =
  LlmEndpointsPatchResponses[keyof LlmEndpointsPatchResponses];

export type MetricsGetAllData = {
  body?: never;
  path?: never;
  query?: {
    offset?: number;
    limit?: number;
  };
  url: "/v1/metrics";
};

export type MetricsGetAllErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type MetricsGetAllError = MetricsGetAllErrors[keyof MetricsGetAllErrors];

export type MetricsGetAllResponses = {
  /**
   * Successful Response
   */
  200: Array<Metric>;
};

export type MetricsGetAllResponse =
  MetricsGetAllResponses[keyof MetricsGetAllResponses];

export type MetricsPostData = {
  body: MetricCreate;
  path?: never;
  query?: never;
  url: "/v1/metrics";
};

export type MetricsPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type MetricsPostError = MetricsPostErrors[keyof MetricsPostErrors];

export type MetricsPostResponses = {
  /**
   * Successful Response
   */
  201: Metric;
};

export type MetricsPostResponse =
  MetricsPostResponses[keyof MetricsPostResponses];

export type MetricsGetTypesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v1/metrics/types";
};

export type MetricsGetTypesResponses = {
  /**
   * Successful Response
   */
  200: MetricTypesResponse;
};

export type MetricsGetTypesResponse =
  MetricsGetTypesResponses[keyof MetricsGetTypesResponses];

export type MetricsDeleteData = {
  body: MetricDelete;
  path: {
    metric_id: string;
  };
  query?: never;
  url: "/v1/metrics/{metric_id}";
};

export type MetricsDeleteErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type MetricsDeleteError = MetricsDeleteErrors[keyof MetricsDeleteErrors];

export type MetricsDeleteResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type MetricsGetData = {
  body?: never;
  path: {
    metric_id: string;
  };
  query?: never;
  url: "/v1/metrics/{metric_id}";
};

export type MetricsGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type MetricsGetError = MetricsGetErrors[keyof MetricsGetErrors];

export type MetricsGetResponses = {
  /**
   * Successful Response
   */
  200: Metric;
};

export type MetricsGetResponse = MetricsGetResponses[keyof MetricsGetResponses];

export type MetricsPatchData = {
  body: MetricUpdate;
  path: {
    metric_id: string;
  };
  query?: never;
  url: "/v1/metrics/{metric_id}";
};

export type MetricsPatchErrors = {
  /**
   * Not Found
   */
  404: GenericError;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type MetricsPatchError = MetricsPatchErrors[keyof MetricsPatchErrors];

export type MetricsPatchResponses = {
  /**
   * Successful Response
   */
  200: Metric;
};

export type MetricsPatchResponse =
  MetricsPatchResponses[keyof MetricsPatchResponses];
