// This file is auto-generated by @hey-api/openapi-ts

import { type Options, formDataBodySerializer } from "@hey-api/client-fetch";
import type {
  HealthcheckHealthData,
  EvaluationsGetAllData,
  EvaluationsGetAllResponse,
  EvaluationsGetAllError,
  EvaluationsPostData,
  EvaluationsPostResponse,
  EvaluationsPostError,
  EvaluationsDeleteData,
  EvaluationsDeleteError,
  EvaluationsGetData,
  EvaluationsGetResponse,
  EvaluationsGetError,
  EvaluationsPatchData,
  EvaluationsPatchResponse,
  EvaluationsPatchError,
  EvaluationsGetEvaluationDetailSummaryData,
  EvaluationsGetEvaluationDetailSummaryResponse,
  EvaluationsGetEvaluationDetailSummaryError,
  EvaluationsGetResultsExportData,
  EvaluationsGetResultsExportError,
  EvaluationResultsGetGroupedData,
  EvaluationResultsGetGroupedResponse,
  EvaluationResultsGetGroupedError,
  EvaluationResultsGetData,
  EvaluationResultsGetResponse,
  EvaluationResultsGetError,
  DashboardGetDataData,
  DashboardGetDataResponse,
  QaCatalogGetAllData,
  QaCatalogGetAllResponse,
  QaCatalogGetAllError,
  QaCatalogUploadData,
  QaCatalogUploadResponse,
  QaCatalogUploadError,
  QaCatalogUpdateData,
  QaCatalogUpdateResponse,
  QaCatalogUpdateError,
  QaCatalogDeleteData,
  QaCatalogDeleteResponse,
  QaCatalogDeleteError,
  QaCatalogGetData,
  QaCatalogGetResponse,
  QaCatalogGetError,
  QaCatalogEditQaCatalogData,
  QaCatalogEditQaCatalogResponse,
  QaCatalogEditQaCatalogError,
  QaCatalogGetPreviewData,
  QaCatalogGetPreviewResponse,
  QaCatalogGetPreviewError,
  QaCatalogGetCatalogQaPairsData,
  QaCatalogGetCatalogQaPairsResponse,
  QaCatalogGetCatalogQaPairsError,
  QaCatalogCreateDataSourceConfigData,
  QaCatalogCreateDataSourceConfigResponse,
  QaCatalogCreateDataSourceConfigError,
  QaCatalogGenerateData,
  QaCatalogGenerateResponse,
  QaCatalogGenerateError,
  QaCatalogGetGeneratorTypesData,
  QaCatalogGetGeneratorTypesResponse,
  QaCatalogDownloadData,
  QaCatalogDownloadResponse,
  QaCatalogDownloadError,
  QaCatalogGetHistoryData,
  QaCatalogGetHistoryResponse,
  QaCatalogGetHistoryError,
  LlmEndpointsGetAllData,
  LlmEndpointsGetAllResponse,
  LlmEndpointsGetAllError,
  LlmEndpointsPostData,
  LlmEndpointsPostResponse,
  LlmEndpointsPostError,
  LlmEndpointsGetTypesData,
  LlmEndpointsGetTypesResponse,
  LlmEndpointsDeleteData,
  LlmEndpointsDeleteError,
  LlmEndpointsGetData,
  LlmEndpointsGetResponse,
  LlmEndpointsGetError,
  LlmEndpointsPatchData,
  LlmEndpointsPatchResponse,
  LlmEndpointsPatchError,
  MetricsGetAllData,
  MetricsGetAllResponse,
  MetricsGetAllError,
  MetricsPostData,
  MetricsPostResponse,
  MetricsPostError,
  MetricsGetTypesData,
  MetricsGetTypesResponse,
  MetricsDeleteData,
  MetricsDeleteError,
  MetricsGetData,
  MetricsGetResponse,
  MetricsGetError,
  MetricsPatchData,
  MetricsPatchResponse,
  MetricsPatchError,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

/**
 * Health
 */
export const healthcheckHealth = <ThrowOnError extends boolean = false>(
  options?: Options<HealthcheckHealthData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>(
    {
      url: "/health",
      ...options,
    },
  );
};

/**
 * Get All
 * Get all evaluations.
 */
export const evaluationsGetAll = <ThrowOnError extends boolean = false>(
  options?: Options<EvaluationsGetAllData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    EvaluationsGetAllResponse,
    EvaluationsGetAllError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/eval/evaluations",
    ...options,
  });
};

/**
 * Post
 * Performing the evaluation using a QA catalogue. The test cases are created on the basis of the QA catalogue and evaluated in the background.
 */
export const evaluationsPost = <ThrowOnError extends boolean = false>(
  options: Options<EvaluationsPostData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    EvaluationsPostResponse,
    EvaluationsPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/eval/evaluations",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete
 */
export const evaluationsDelete = <ThrowOnError extends boolean = false>(
  options: Options<EvaluationsDeleteData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    unknown,
    EvaluationsDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/eval/evaluations/{evaluation_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get
 */
export const evaluationsGet = <ThrowOnError extends boolean = false>(
  options: Options<EvaluationsGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    EvaluationsGetResponse,
    EvaluationsGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/eval/evaluations/{evaluation_id}",
    ...options,
  });
};

/**
 * Patch
 */
export const evaluationsPatch = <ThrowOnError extends boolean = false>(
  options: Options<EvaluationsPatchData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).patch<
    EvaluationsPatchResponse,
    EvaluationsPatchError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/eval/evaluations/{evaluation_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Evaluation Detail Summary
 */
export const evaluationsGetEvaluationDetailSummary = <
  ThrowOnError extends boolean = false,
>(
  options: Options<EvaluationsGetEvaluationDetailSummaryData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    EvaluationsGetEvaluationDetailSummaryResponse,
    EvaluationsGetEvaluationDetailSummaryError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/eval/evaluations/{evaluation_id}/summary",
    ...options,
  });
};

/**
 * Get Results Export
 */
export const evaluationsGetResultsExport = <
  ThrowOnError extends boolean = false,
>(
  options: Options<EvaluationsGetResultsExportData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    unknown,
    EvaluationsGetResultsExportError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/eval/evaluations/{evaluation_id}/results-export",
    ...options,
  });
};

/**
 * Get Grouped
 */
export const evaluationResultsGetGrouped = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<EvaluationResultsGetGroupedData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    EvaluationResultsGetGroupedResponse,
    EvaluationResultsGetGroupedError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/eval/evaluation-results/grouped",
    ...options,
  });
};

/**
 * Get
 */
export const evaluationResultsGet = <ThrowOnError extends boolean = false>(
  options: Options<EvaluationResultsGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    EvaluationResultsGetResponse,
    EvaluationResultsGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/eval/evaluation-results/{result_id}",
    ...options,
  });
};

/**
 * Get Data
 */
export const dashboardGetData = <ThrowOnError extends boolean = false>(
  options?: Options<DashboardGetDataData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    DashboardGetDataResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/dashboard",
    ...options,
  });
};

/**
 * Get All
 */
export const qaCatalogGetAll = <ThrowOnError extends boolean = false>(
  options?: Options<QaCatalogGetAllData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    QaCatalogGetAllResponse,
    QaCatalogGetAllError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/qa-catalog",
    ...options,
  });
};

/**
 * Upload
 */
export const qaCatalogUpload = <ThrowOnError extends boolean = false>(
  options: Options<QaCatalogUploadData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    QaCatalogUploadResponse,
    QaCatalogUploadError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/qa-catalog/upload",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * Update
 */
export const qaCatalogUpdate = <ThrowOnError extends boolean = false>(
  options: Options<QaCatalogUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).put<
    QaCatalogUpdateResponse,
    QaCatalogUpdateError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/qa-catalog/{catalog_id}/upload",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * Delete
 */
export const qaCatalogDelete = <ThrowOnError extends boolean = false>(
  options: Options<QaCatalogDeleteData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    QaCatalogDeleteResponse,
    QaCatalogDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/qa-catalog/{catalog_id}",
    ...options,
  });
};

/**
 * Get
 */
export const qaCatalogGet = <ThrowOnError extends boolean = false>(
  options: Options<QaCatalogGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    QaCatalogGetResponse,
    QaCatalogGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/qa-catalog/{catalog_id}",
    ...options,
  });
};

/**
 * Edit Qa Catalog
 */
export const qaCatalogEditQaCatalog = <ThrowOnError extends boolean = false>(
  options: Options<QaCatalogEditQaCatalogData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).patch<
    QaCatalogEditQaCatalogResponse,
    QaCatalogEditQaCatalogError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/qa-catalog/{catalog_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Preview
 */
export const qaCatalogGetPreview = <ThrowOnError extends boolean = false>(
  options: Options<QaCatalogGetPreviewData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    QaCatalogGetPreviewResponse,
    QaCatalogGetPreviewError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/qa-catalog/{catalog_id}/preview",
    ...options,
  });
};

/**
 * Get Catalog Qa Pairs
 */
export const qaCatalogGetCatalogQaPairs = <
  ThrowOnError extends boolean = false,
>(
  options: Options<QaCatalogGetCatalogQaPairsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    QaCatalogGetCatalogQaPairsResponse,
    QaCatalogGetCatalogQaPairsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/qa-catalog/{catalog_id}/qa-pairs",
    ...options,
  });
};

/**
 * Create Data Source Config
 */
export const qaCatalogCreateDataSourceConfig = <
  ThrowOnError extends boolean = false,
>(
  options: Options<QaCatalogCreateDataSourceConfigData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    QaCatalogCreateDataSourceConfigResponse,
    QaCatalogCreateDataSourceConfigError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/qa-catalog/generator/upload",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * Generate
 * Start a new qa catalog generation
 */
export const qaCatalogGenerate = <ThrowOnError extends boolean = false>(
  options: Options<QaCatalogGenerateData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    QaCatalogGenerateResponse,
    QaCatalogGenerateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/qa-catalog/generator/catalog",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Generator Types
 * Currently active generator types to select from for catalog creation
 */
export const qaCatalogGetGeneratorTypes = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<QaCatalogGetGeneratorTypesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    QaCatalogGetGeneratorTypesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/qa-catalog/generator/types",
    ...options,
  });
};

/**
 * Download
 */
export const qaCatalogDownload = <ThrowOnError extends boolean = false>(
  options: Options<QaCatalogDownloadData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    QaCatalogDownloadResponse,
    QaCatalogDownloadError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/qa-catalog/download",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get History
 */
export const qaCatalogGetHistory = <ThrowOnError extends boolean = false>(
  options: Options<QaCatalogGetHistoryData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    QaCatalogGetHistoryResponse,
    QaCatalogGetHistoryError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/qa-catalog/{catalog_id}/history",
    ...options,
  });
};

/**
 * Get All
 */
export const llmEndpointsGetAll = <ThrowOnError extends boolean = false>(
  options?: Options<LlmEndpointsGetAllData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    LlmEndpointsGetAllResponse,
    LlmEndpointsGetAllError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/llm-endpoints",
    ...options,
  });
};

/**
 * Post
 */
export const llmEndpointsPost = <ThrowOnError extends boolean = false>(
  options: Options<LlmEndpointsPostData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    LlmEndpointsPostResponse,
    LlmEndpointsPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/llm-endpoints",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Types
 */
export const llmEndpointsGetTypes = <ThrowOnError extends boolean = false>(
  options?: Options<LlmEndpointsGetTypesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    LlmEndpointsGetTypesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/llm-endpoints/types",
    ...options,
  });
};

/**
 * Delete
 */
export const llmEndpointsDelete = <ThrowOnError extends boolean = false>(
  options: Options<LlmEndpointsDeleteData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    unknown,
    LlmEndpointsDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/llm-endpoints/{llm_endpoint_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get
 */
export const llmEndpointsGet = <ThrowOnError extends boolean = false>(
  options: Options<LlmEndpointsGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    LlmEndpointsGetResponse,
    LlmEndpointsGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/llm-endpoints/{llm_endpoint_id}",
    ...options,
  });
};

/**
 * Patch
 */
export const llmEndpointsPatch = <ThrowOnError extends boolean = false>(
  options: Options<LlmEndpointsPatchData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).patch<
    LlmEndpointsPatchResponse,
    LlmEndpointsPatchError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/llm-endpoints/{llm_endpoint_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get All
 */
export const metricsGetAll = <ThrowOnError extends boolean = false>(
  options?: Options<MetricsGetAllData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    MetricsGetAllResponse,
    MetricsGetAllError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/metrics",
    ...options,
  });
};

/**
 * Post
 */
export const metricsPost = <ThrowOnError extends boolean = false>(
  options: Options<MetricsPostData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    MetricsPostResponse,
    MetricsPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/metrics",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Types
 */
export const metricsGetTypes = <ThrowOnError extends boolean = false>(
  options?: Options<MetricsGetTypesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    MetricsGetTypesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/metrics/types",
    ...options,
  });
};

/**
 * Delete
 */
export const metricsDelete = <ThrowOnError extends boolean = false>(
  options: Options<MetricsDeleteData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    unknown,
    MetricsDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/metrics/{metric_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get
 */
export const metricsGet = <ThrowOnError extends boolean = false>(
  options: Options<MetricsGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    MetricsGetResponse,
    MetricsGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/metrics/{metric_id}",
    ...options,
  });
};

/**
 * Patch
 */
export const metricsPatch = <ThrowOnError extends boolean = false>(
  options: Options<MetricsPatchData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).patch<
    MetricsPatchResponse,
    MetricsPatchError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v1/metrics/{metric_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};
