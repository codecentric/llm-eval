---
name: Frontend Release

"on":
  workflow_dispatch:
    inputs:
      version:
        description: >-
          Version to release (e.g., 1.0.0).
          If not provided, uses package.json version
        required: false
        type: string
  push:
    tags:
      - 'frontend-v*'
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Determine version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [ "${{ github.ref_type }}" == "tag" ]; then
            # Extract version from tag (remove 'frontend-v' or 'v' prefix)
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#frontend-v}"
            VERSION="${VERSION#v}"
          else
            # Get version from package.json
            VERSION=$(cd frontend && \
              node -p "require('./package.json').version")
          fi

          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

          # Parse semantic version components
          IFS='.' read -ra VERSION_PARTS <<< "${VERSION}"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]:-0}"
          PATCH="${VERSION_PARTS[2]:-0}"

          echo "MAJOR=${MAJOR}" >> $GITHUB_ENV
          echo "MINOR=${MINOR}" >> $GITHUB_ENV
          echo "PATCH=${PATCH}" >> $GITHUB_ENV

          # Set image name for frontend
          RAG_EVAL_UI_IMAGE="ghcr.io/${{ github.repository }}/rag-eval-ui"
          echo "RAG_EVAL_UI_IMAGE=${RAG_EVAL_UI_IMAGE}" >> $GITHUB_ENV

      - name: Create git tag if not exists
        if: github.ref_type != 'tag'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email \
            "github-actions[bot]@users.noreply.github.com"

          TAG_NAME="frontend-v${{ env.VERSION }}"
          if ! git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            git tag "$TAG_NAME"
            git push origin "$TAG_NAME"
          fi

      - uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push frontend container with semantic versioning
        uses: docker/build-push-action@v6
        with:
          context: frontend/
          file: frontend/Dockerfile
          build-args: |
            VERSION=${{ env.VERSION }}
          push: true
          tags: |
            ${{ env.RAG_EVAL_UI_IMAGE }}:${{ env.VERSION }}
            ${{ env.RAG_EVAL_UI_IMAGE }}:v${{ env.VERSION }}
            ${{ env.RAG_EVAL_UI_IMAGE }}:${{ env.MAJOR }}.${{ env.MINOR }}
            ${{ env.RAG_EVAL_UI_IMAGE }}:${{ env.MAJOR }}
            ${{ env.RAG_EVAL_UI_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create GitHub Release
        if: github.ref_type != 'tag' || github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: frontend-v${{ env.VERSION }}
          name: Frontend Release v${{ env.VERSION }}
          body: |
            ## Frontend Release v${{ env.VERSION }}

            ### Docker Images
            - `${{ env.RAG_EVAL_UI_IMAGE }}:${{ env.VERSION }}`
            - `${{ env.RAG_EVAL_UI_IMAGE }}:v${{ env.VERSION }}`
            - `${{ env.RAG_EVAL_UI_IMAGE }}:${{ env.MAJOR }}.${{ env.MINOR }}`
            - `${{ env.RAG_EVAL_UI_IMAGE }}:${{ env.MAJOR }}`
            - `${{ env.RAG_EVAL_UI_IMAGE }}:latest`

            ### Changes
            This release contains the frontend application with semantic
            versioning support.
          draft: false
          prerelease: >-
            ${{ contains(env.VERSION, 'alpha') ||
                contains(env.VERSION, 'beta') ||
                contains(env.VERSION, 'rc') }}
          token: ${{ secrets.GITHUB_TOKEN }}
