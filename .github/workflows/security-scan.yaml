---
name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Secret detection job - replaces GitLab secret_detection
  secret-detection:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified --json --output-file=secret-detection-report.json

      - name: Upload secret detection report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secret-detection-report
          path: secret-detection-report.json
          retention-days: 30

  # SAST scanning job - replaces GitLab semgrep-sast
  semgrep-sast:
    name: Semgrep SAST
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        run: |
          semgrep --config=auto --json --output=sast-report.json .
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Upload SAST report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sast-report
          path: sast-report.json
          retention-days: 30

  # Secret detection analysis - replaces GitLab check-secrets
  check-secrets:
    name: Check Secrets
    runs-on: ubuntu-latest
    needs: secret-detection
    if: always()
    steps:
      - name: Download secret detection report
        uses: actions/download-artifact@v4
        with:
          name: secret-detection-report

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Analyze secret detection results
        run: |
          # Check if the report file exists and is not empty
          if [ ! -f "secret-detection-report.json" ] || [ ! -s "secret-detection-report.json" ]; then
            echo "No secret detection report found or report is empty"
            echo "No secrets detected."
            exit 0
          fi
          
          # Check if any secrets were found
          secrets_count=$(jq length secret-detection-report.json 2>/dev/null || echo "0")
          
          if [ "$secrets_count" -gt 0 ]; then
            echo "⚠️ $secrets_count secret(s) found! Failing the pipeline."
            jq . secret-detection-report.json
            exit 1
          else
            echo "✅ No secrets detected."
          fi

  # SAST report analysis - replaces GitLab check-sast-report
  check-sast-report:
    name: Check SAST Report
    runs-on: ubuntu-latest
    needs: semgrep-sast
    if: always()
    steps:
      - name: Download SAST report
        uses: actions/download-artifact@v4
        with:
          name: sast-report

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Analyze SAST results
        run: |
          # Check if the report file exists
          if [ ! -f "sast-report.json" ]; then
            echo "No SAST report found"
            exit 1
          fi
          
          # Parse the report and count vulnerabilities
          # Semgrep report structure: {"results": [...], "errors": [...]}
          vulnerabilities_count=$(jq '.results | length' sast-report.json 2>/dev/null || echo "0")
          
          if [ "$vulnerabilities_count" -gt 0 ]; then
            echo "⚠️ $vulnerabilities_count vulnerability/vulnerabilities found!"
            
            # Count critical/high severity issues
            critical_count=$(jq '[.results[] | select(.extra.severity == "ERROR")] | length' sast-report.json 2>/dev/null || echo "0")
            high_count=$(jq '[.results[] | select(.extra.severity == "WARNING")] | length' sast-report.json 2>/dev/null || echo "0")
            
            echo "Critical/Error severity: $critical_count"
            echo "High/Warning severity: $high_count"
            
            if [ "$critical_count" -gt 0 ]; then
              echo "❌ $critical_count critical vulnerability(s) found!"
              exit 1
            elif [ "$high_count" -gt 0 ]; then
              echo "⚠️ $high_count high severity vulnerability(s) found!"
              echo "No critical vulnerabilities found! But you should have a look at the others nevertheless"
              exit 1
            else
              echo "⚠️ Vulnerabilities found but none are critical or high severity"
              echo "You should review these findings nevertheless"
              exit 1
            fi
          else
            echo "✅ No vulnerabilities found!"
          fi

  # Summary job to provide overall security status
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [check-secrets, check-sast-report]
    if: always()
    steps:
      - name: Security Scan Summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.check-secrets.result }}" = "success" ]; then
            echo "✅ **Secret Detection**: No secrets found" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Secret Detection**: Secrets detected!" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.check-sast-report.result }}" = "success" ]; then
            echo "✅ **SAST Analysis**: No critical vulnerabilities" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **SAST Analysis**: Vulnerabilities detected!" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "For detailed results, check the individual job outputs and artifacts." >> $GITHUB_STEP_SUMMARY