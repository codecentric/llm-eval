---
name: Security Scan

"on":
  workflow_dispatch:
  workflow_call:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Secret detection job - replaces GitLab secret_detection
  secret-detection:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --results=verified,unknown

      - name: Handle TruffleHog errors
        if: failure()
        run: |
          echo "TruffleHog encountered an error. Please check the logs for details."
          exit 1

      - name: Analyze secret detection results
        run: |
          # Check if the report file exists and is not empty
          if [ ! -f "secret-detection-report.json" ] || [ ! -s "secret-detection-report.json" ]; then
            echo "No secret detection report found or report is empty"
            echo "✅ No secrets detected."
            exit 0
          fi

          # Check if any secrets were found
          secrets_count=$(jq length secret-detection-report.json 2>/dev/null || echo "0")

          if [ "$secrets_count" -gt 0 ]; then
            echo "⚠️ $secrets_count secret(s) found! Failing the pipeline."
            jq . secret-detection-report.json
            exit 1
          else
            echo "✅ No secrets detected."
          fi

  # SAST scanning job - replaces GitLab semgrep-sast
  semgrep-sast:
    name: Semgrep SAST
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        run: |
          if ! semgrep --config=auto --json --output=sast-report.json .; then
            echo "Semgrep failed. Please check the configuration or logs for details." >&2
          fi
          # Ensure we have a valid JSON file even if no findings
          if [ ! -f "sast-report.json" ] || [ ! -s "sast-report.json" ]; then
            echo '{"results": [], "errors": []}' > sast-report.json
          fi
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Analyze SAST results
        run: |
          # Check if the report file exists
          if [ ! -f "sast-report.json" ]; then
            echo "No SAST report found"
            exit 1
          fi

          # Parse the report and count vulnerabilities
          # Semgrep report structure: {"results": [...], "errors": [...]}
          vulnerabilities_count=$(python3 -c "import json; print(len(json.load(open('sast-report.json')).get('results', [])))" 2>/dev/null || echo "0")

          if [ "$vulnerabilities_count" -gt 0 ]; then
            echo "⚠️ $vulnerabilities_count vulnerability/vulnerabilities found!"

            # Count critical/high severity issues
            critical_count=$(python3 -c "import json; data=json.load(open('sast-report.json')); print(len([r for r in data.get('results', []) if r.get('extra', {}).get('severity') == 'ERROR']))" 2>/dev/null || echo "0")
            high_count=$(python3 -c "import json; data=json.load(open('sast-report.json')); print(len([r for r in data.get('results', []) if r.get('extra', {}).get('severity') == 'WARNING']))" 2>/dev/null || echo "0")

            echo "Critical/Error severity: $critical_count"
            echo "High/Warning severity: $high_count"

            if [ "$critical_count" -gt 0 ]; then
              echo "❌ $critical_count critical vulnerability(s) found!"
              exit 1
            elif [ "$high_count" -gt 0 ]; then
              echo "⚠️ $high_count high severity vulnerability(s) found!"
              echo "No critical vulnerabilities found! But you should have a look at the others nevertheless"
              exit 1
            else
              echo "⚠️ Vulnerabilities found but none are critical or high severity"
              echo "You should review these findings nevertheless"
              exit 1
            fi
          else
            echo "✅ No vulnerabilities found!"
          fi
